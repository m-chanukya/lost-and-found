generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String                  @id @default(cuid())
  email         String                  @unique
  name          String
  phoneNumber   String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  foundItems    FoundItem[]
  lostItems     LostItem[]
  notifications NotificationPreference?
}

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     Boolean  @default(true)
  sms       Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model LostItem {
  id                String      @id @default(cuid())
  userId            String
  category          String
  title             String
  description       String
  lastSeenLocation  String
  date              DateTime
  color             String?
  brand             String?
  size              String?
  markings          String?
  additionalDetails String?
  images            String?
  reward            Float?
  status            String      @default("pending")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  matches           ItemMatch[] @relation("LostItemMatches")
  user              User        @relation(fields: [userId], references: [id])
}

model FoundItem {
  id                String      @id @default(cuid())
  userId            String
  category          String
  title             String
  description       String
  foundLocation     String
  whereStored       String?
  date              DateTime
  color             String?
  brand             String?
  size              String?
  markings          String?
  additionalDetails String?
  images            String?
  status            String      @default("pending")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id])
  matches           ItemMatch[] @relation("FoundItemMatches")
}

model ItemMatch {
  id              String    @id @default(cuid())
  lostItemId      String
  foundItemId     String
  matchConfidence Float
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  foundItem       FoundItem @relation("FoundItemMatches", fields: [foundItemId], references: [id])
  lostItem        LostItem  @relation("LostItemMatches", fields: [lostItemId], references: [id])

  @@unique([lostItemId, foundItemId])
}
